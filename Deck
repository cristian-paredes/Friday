import java.util.*;
import java.io.*;
/** Description of Card
 *It holds all the different types of cards and brings them together to interact
 * @author Kevin Soto
 * @author Noah Schnur
 * @version Jan 11, 2016.
 */

public class Deck
{
    ArrayList<Card> deck;
    String file;
    public Deck(String file)
    {
        this.file = file;//This string holds the data in the text file
        deck = new ArrayList<Card>();//Used to hold each line for use in the Peg class
        Scanner scanner;//Initializing the data type before being used in a loop can save some time
        String line;
        try//used to grab data from a text file
        {
            scanner = new Scanner(new File(file));//To take data from the text file, you need to use it in the Scanner class
            while(scanner.hasNextLine())//while there is data in the current line in the text
            {
                line = scanner.nextLine();//grab the data in the line
                deck.add(new Card(line));//store the data for use in the Peg class
            }
            scanner.close();//Once you are done using the file, use this to avoid errors
        }
        catch(FileNotFoundException e)//If the board catches any error when retrieving a file, do this
        {
            System.out.println("PNF-404");
        }
    }
    
    public String toString()
    {
        String str = "";
        for(Card card: deck)
        {
            str += card += "/n";
        }
        return str;
    }
   
    
    /** topCard it gets the number of the top card in a deck to be played*/
    private int topCard;

    /** cardsLeft gets the number left in the challenge cards to move to next level */
    private int cardsLeft;

    /** Array deck holds the name of each card */
    public ArrayList<Deck> deck;

    

    /**
     * moves card from one type to another array.
     * 
     * @param card The maximum number of lives in the game.
     *
     */
    public Card addCard(Card cardName)
    {
     deck.add(cardName);

    }

    /**
     * it moves cards from deck/array.
     * 
     * @param card The maximum number of lives in the game.
    
     */
    public Card removeCard(Card cardName)

    {
        deck.remove(cardName);

    }

    /**
     *it allows you to get a card from the array/deck.
     * 
     *  @param card The maximum number of lives in the game.
     */
    public int indexOf(Card cardName)
    {
        deck.indexOf(cardName);
    }

    /**
     * it moves the card back to the deck.
     * 
     *  @param card The maximum number of lives in the game.
     * 
     */
    public void restoreCard(Card card)
    {
        
    }
    public Card randomCard()
    {
        int w = randomPosition();
        deck.get(w);
           
       
    }
    public int getSize()
    {
        return deck.size();
           
       
    }
    /**
     * it shuffles deck
     * 
    
     */
    public void shuffleCard()
    {
        ArrayList<Card> tempDeck;
        tempDeck = new ArrayList<Card>();
        
        
       
        while(deck.size() >0){
            int n = randomPosition();
           
            tempDeck.add(deck.remove(n));
        }
        deck = tempDeck;
        
    }
    
    private int randomPosition()
    {
        return Math.random()*deck.size();
    }
    
    public Card getCard(int index)
    {
        return deck.get(index);
    
    }
   
}

