import java.util.*;

/**
 * The primary code used as the "engine" for the Friday game.
 * 
 * @author Cristian Paredes 
 * @version 1-5-16
 */
public class Game
{
    private int totalLives;
    private int livesLeft;
    private int phase;
    private Deck pirateDeck;
    private Deck hazardDeck;
    private Deck robinsonDeck;
    private Deck agingDeck;
    private Deck rightHandSide;
    private Deck leftHandSide;
    private Deck discard;
    private Deck sortThreeDeck;
    /**
     * Creates an object containing all of the information needed
     * to create a custom Friday game. The String objects represent
     * the original text databases for the cards.
     * 
     * 
     * @param totalLives The maximum number of lives in the game.
     * @param livesLeft The lives available to the player.
     * @param phase The game phase.
     * @param pirateDeck An object which contains all of the Pirate Cards.
     * @param hazardDeck An object which contains all of the Hazard Cards.
     * @param robinsonCard An object which contains all of the Robinson Cards.
     * @param agingDeck An object which contains all of the Aging Cards.
     */
    public Game(int totalLives, int startLives, String pirateCards,
    String hazardCards,String robinsonCards, String agingCards)
    {
        this.totalLives = totalLives;
        livesLeft = startLives;
        pirateDeck = new Deck(pirateCards);
        hazardDeck = new Deck(hazardCards);
        robinsonDeck = new Deck(robinsonCards);
        agingDeck = new Deck(agingCards);
    }

    /**
     * Creates a version of the game based on the preset levels
     * listed in the Instruction Manual.
     * 
     * @param  level The level of difficulty. 
     */
    public Game(int level)
    {
        this(22,20,"PirateCards.txt","HazardCards.txt","RobinsonCards.txt",
            "AgingCards.txt");
        switch(level)
        {
            case 1: agingDeck.removeCard(veryStupid);
                    break;
            case 2: agingDeck.removeCard(veryStupid);
                    moveCard(agingDeck.randomCard(), agingDeck, robinsonDeck);
                    break;
            case 3: moveCard(agingDeck.randomCard(), agingDeck, robinsonDeck);
                    moveCard(agingDeck.randomCard(), agingDeck, robinsonDeck);
                    break;
            case 4: this(3);
                    totalLives = 18;
                    livesLeft = 20;
                    break;
            default: System.out.println("Invalid Level!");
        }
    }

    /**
     * Allows the game to be able to move cards around from one deck to another.
     * 
     * @param  card   The card that will be moved.
     * @param  from   The deck from which the card will be moved from.
     * @param  to     The deck from which the card is moved to.
     */
    public void moveCard(Card card, Deck from, Deck to)
    {
        if(from.getCardPosition(card) != -1)
            to.add(from.remove(i));
    }
    
    /**
     * Allows the game to be able to move the card on top of one deck to the other deck.
     * 
     * @param  card   The card that will be moved.
     * @param  from   The deck from which the card will be moved from.
     * @param  to     The deck from which the card is moved to.
     */
    public void moveCard(Deck from, Deck to)
    {
        to.add(from.removeCard(0));
    }

    /**
     * Increments the phase of the game once there are no more Hazard Cards in the deck.
     * Useful for initiating the pirate phase.
     *  
     */
    public void incrementGamePhase()
    {
        if(phase < 3)
        {
            for(int i = 0; i < discard.getSize();i++)
            {
                moveCard(discard,hazardDeck);
            }
            discard.shuffleDeck();
        }
        else
        {
            pirateDeck.randomCard();
        }
        phase++;
    }

    /**
     * Return the game phase. Used for the hazard cards.
     * 
     * @return phase The game phase.
     */
    public void getGamePhase()
    {
        return phase;
    }

    /**
     * Detects whether or not the player chooses to give up a hazard card.
     * 
     */
    public void hazardLose()
    {
        
    }

    public String toString()
    {
        String str = "";
        //System.out.println(robinsonDeck);
        System.out.println(hazardDeck);
        //System.out.println(agingDeck);
        //System.out.println(pirateDeck);
        return str;
    }
}
